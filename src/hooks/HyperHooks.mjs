// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as HyperProvider from "../context/HyperProvider.mjs";
import * as HyperTurboModules from "./HyperTurboModules.mjs";
import * as HyperNativeModules from "../nativeModules/HyperNativeModules.mjs";

function isTurboModuleAvailable() {
  return true;
}

function useHyper() {
  var match = React.useContext(HyperProvider.hyperProviderContext);
  var hyperVal = match[0];
  var initPaymentSession = async function (initPaymentSheetParams) {
    var hsSdkParams_configuration = Core__Option.getOr(initPaymentSheetParams.configuration, {});
    var hsSdkParams_customBackendUrl = Caml_option.some(hyperVal.customBackendUrl);
    var hsSdkParams_publishableKey = Core__Option.getOr(initPaymentSheetParams.publishableKey, hyperVal.publishableKey);
    var hsSdkParams_clientSecret = initPaymentSheetParams.clientSecret;
    var hsSdkParams = {
      configuration: hsSdkParams_configuration,
      customBackendUrl: hsSdkParams_customBackendUrl,
      publishableKey: hsSdkParams_publishableKey,
      clientSecret: hsSdkParams_clientSecret,
      type: "payment",
      from: "rn"
    };
    var res = await HyperTurboModules.initPaymentSession(initPaymentSheetParams);
    if (res.status === "success") {
      console.log("Initialized payment session:", res);
      return hsSdkParams;
    } else {
      return Js_exn.raiseError(res.message === "" ? "Failed to initialize payment session" : res.message);
    }
  };
  var presentPaymentSheet = function (paySheetParams) {
    return HyperTurboModules.presentPaymentSheet(paySheetParams);
  };
  var getCustomerSavedPaymentMethods = function (paySheetParams) {
    return HyperTurboModules.getCustomerSavedPaymentMethods(paySheetParams);
  };
  var getCustomerDefaultSavedPaymentMethodData = function (paySheetParams) {
    return HyperTurboModules.getCustomerDefaultSavedPaymentMethodData(paySheetParams);
  };
  var getCustomerLastUsedPaymentMethodData = function (paySheetParams) {
    return HyperTurboModules.getCustomerLastUsedPaymentMethodData(paySheetParams);
  };
  var getCustomerSavedPaymentMethodData = function (paySheetParams) {
    return HyperTurboModules.getCustomerSavedPaymentMethodData(paySheetParams);
  };
  var confirmWithCustomerDefaultPaymentMethod = function ($$arguments) {
    return HyperTurboModules.confirmWithCustomerDefaultPaymentMethod($$arguments);
  };
  var confirmWithCustomerLastUsedPaymentMethod = function ($$arguments) {
    return HyperTurboModules.confirmWithCustomerLastUsedPaymentMethod($$arguments);
  };
  var confirmWithCustomerPaymentToken = function ($$arguments) {
    return HyperTurboModules.confirmWithCustomerPaymentToken($$arguments);
  };
  return {
          initPaymentSession: initPaymentSession,
          presentPaymentSheet: presentPaymentSheet,
          getCustomerSavedPaymentMethods: getCustomerSavedPaymentMethods,
          getCustomerDefaultSavedPaymentMethodData: getCustomerDefaultSavedPaymentMethodData,
          getCustomerLastUsedPaymentMethodData: getCustomerLastUsedPaymentMethodData,
          getCustomerSavedPaymentMethodData: getCustomerSavedPaymentMethodData,
          confirmWithCustomerDefaultPaymentMethod: confirmWithCustomerDefaultPaymentMethod,
          confirmWithCustomerLastUsedPaymentMethod: confirmWithCustomerLastUsedPaymentMethod,
          confirmWithCustomerPaymentToken: confirmWithCustomerPaymentToken
        };
}

export {
  isTurboModuleAvailable ,
  useHyper ,
}
/* react Not a pure module */
